---
title: "Centered algorithm with simulated data, with interaction"
author: "Juan Li"
date: 2025-08-13
format: 
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---

```{r}
#| warning: false
#| message: false
#| output: false

library(dplyr) # Data manipulation
library(ggplot2) # Data visualization
library(ggpubr) # ggarrange
library(fastDummies) # make dummy variables
library(rms)

source("R/util.R") 
# functions in "util.R"
# get_rcs: implement the formula of rcs components
# step_dummy: dummy variables
# step_rcs: rcs
# step_interaction: interaction terms
# step_center: centering
# get_mean: get mean values from the original dataset
# root.search: Root searching, not in use in this .qmd file
```

# Simulate data for this tutorial

Resources:

-   [Creating simulated data sets in R](https://stirlingcodingclub.github.io/simulating_data/index.html)

-   [Generate Simulated Dataset for Linear Model in R](https://towardsdatascience.com/generate-simulated-dataset-for-linear-model-in-r-469a5e2f4c2e/)

For this tutorial, we will use a simulated dataset with the following predictors:

-   `x1`: a categorical/dichotomous variable with 2 categories: `cat1`, `cat2`

-   `x2`: a categorical variable with 3 categories: `cat1`, `cat2`, `cat3`

-   `x3`: a continuous variable with normal distribution, used as it is

-   `x4`: a continuous variablewith normal distribution, used with restricted cubic spline (rcs), `k_x4 = 4`

-   `x5`: a continuous variable with normal distribution, used as it is

-   `x6`: a continuous variablewith normal distribution, used with restricted cubic spline (rcs), `k_x6 = 3`

And we assume the outcome `y` is a linear combination of the predictors with some noise, and different kinds of interactions:

-   Interaction of two categorical variables: `x1`, `x2`

-   Interaction of one categorical variable and one continuous variabl (no rcs): `x2`, `x3`

-   Interaction of two continuous variables (no rcs): `x3`, `x5`

-   Interaction of one categorical variable and one continuous variabl (with rcs): `x2`, `x4`

-   Interaction of two continuous variables (one with rcs, one without): `x3`, `x4`

-   Interaction of two continuous variables (with rcs): `x4`, `x6`

```{r}
n <- 1000
seed <- 567

set.seed(seed)
data <- data.frame(
  x1 = sample(
    c("cat1", "cat2"),
    size = n,
    replace = TRUE,
    prob = c(0.5, 0.5)
  ),
  x2 = sample(
    c("cat1", "cat2", "cat3"),
    size = n,
    replace = TRUE,
    prob = c(0.1, 0.4, 0.5)
  ),
  x3 = rnorm(n, mean = 100, sd = 38),
  x4 = rnorm(n, mean = 50, sd = 15),
  x5 = rnorm(n, mean = 30, sd = 5),
  x6 = rnorm(n, mean = 15, sd = 3),
  error = rnorm(n, mean = 0, sd = 3)
)
table(data$x1)
table(data$x2)

# -------- dummy variables --------
vars_cat <- c("x1", "x2")
data <- step_dummy(data, vars_cat)

# -------- rcs --------
# x4
k_x4 <- 4
rcs.fit <- rcs(data$x4, k_x4)
knots_x4 <- attributes(rcs.fit)$parms # knot locations
# x6
k_x6 <- 3
rcs.fit <- rcs(data$x6, k_x6)
knots_x6 <- attributes(rcs.fit)$parms # knot locations
# unpack rcs
vars_rcs <- c("x4", "x6")
knots_list <- list(knots_x4, knots_x6)
knots_list <- setNames(knots_list, vars_rcs)
data <- step_rcs(data, vars_rcs, knots_list)

# outcome
data <- data %>%
  mutate(x3_x5_interaction = x3 * x5) %>%
  mutate(
    y = case_when(
      x2 == "cat1" ~ 100 +
      3 * x1_cat2 +
      2 * x2_cat2 +
      0.5 * x2_cat3 +
      10 * x3 +
      25 * x4_rcs_1 +
      18 * x4_rcs_2 +
      21 * x4_rcs_3 -
      6 * x5 +
      0.6 * x6_rcs_1 +
      1.5 * x6_rcs_2 +
      0.1 * x3_x5_interaction +
      error,
    x2 == "cat2" ~ 100 +
      5 * x1_cat2 +    # change based on value of x2
      2 * x2_cat2 +
      0.5 * x2_cat3 +
      21 * x3 +        # change based on value of x2
      8 * x4_rcs_1 +  # change based on value of x2
      36 * x4_rcs_2 +  # change based on value of x2
      14 * x4_rcs_3 -  # change based on value of x2
      6 * x5 +
      0.6 * x6_rcs_1 +
      1.5 * x6_rcs_2 +
      0.1 * x3_x5_interaction +
      error,
    x2 == "cat3" ~ 100 +
      7 * x1_cat2 +    # change based on value of x2
      2 * x2_cat2 +
      0.5 * x2_cat3 +
      5 * x3 +         # change based on value of x2
      2.5 * x4_rcs_1 + # change based on value of x2
      40 * x4_rcs_2 +  # change based on value of x2
      16 * x4_rcs_3 -  # change based on value of x2
      6 * x5 +
      0.6 * x6_rcs_1 +
      1.5 * x6_rcs_2 +
      0.1 * x3_x5_interaction +
      error
  ))

head(data)
```

# Interaction of two categorical variables: `x1`, `x2`

-   There is an older version talking about direct centering and conditional centering, for details, see the .qmd file with the same name in the "backup" folder.

    -   Note: with conditional centering, other coefficients except for intercept (which is equal to $\overline{y}$) are affected.

-   Here, the idea is to unpack the interaction and add the interaction terms, then do centering on all terms.

    -   intercept == $\overline{y}$ is achieved

    -   the rest coefficients stay the same as in the original model

```{r}
#| warning: false
#| message: false

# -------- add interaction terms --------
data <- data %>%
  mutate(
    x1_cat2_by_x2_cat2 = x1_cat2 * x2_cat2,
    x1_cat2_by_x2_cat3 = x1_cat2 * x2_cat3
  )

# -------- centering each term --------
data <- data %>%
  mutate(
    x1_cat2_C = x1_cat2 - mean(data$x1_cat2),
    x2_cat2_C = x2_cat2 - mean(data$x2_cat2),
    x2_cat3_C = x2_cat3 - mean(data$x2_cat3),
    x1_cat2_by_x2_cat2_C = x1_cat2_by_x2_cat2 - mean(data$x1_cat2_by_x2_cat2),
    x1_cat2_by_x2_cat3_C = x1_cat2_by_x2_cat3 - mean(data$x1_cat2_by_x2_cat3)
  )

# --- linear regression model on original variables ---
fit <- lm(y ~ x1 * x2, data = data)
coef(fit)

# --- linear regression model on original variables, but unpacked ---
# to confirm it's the same as above
fit <- lm(y ~ x1_cat2 + x2_cat2 + x2_cat3 + x1_cat2_by_x2_cat2 + x1_cat2_by_x2_cat3, data = data)
coef(fit)

# --- linear regression model on centered variables ---"
paste0("Mean outcome in the dataset: ", mean(data$y))
fit <- lm(y ~ x1_cat2_C + x2_cat2_C + x2_cat3_C + x1_cat2_by_x2_cat2_C + x1_cat2_by_x2_cat3_C, data = data)
coef(fit)
```

# Interaction of one categorical variable and one continuous variabl (no rcs): `x2`, `x3`

-   There is an older version talking about direct centering and conditional centering, for details, see the .qmd file with the same name in the "backup" folder.

    -   Note: with conditional centering, other coefficients except for intercept (which is equal to $\overline{y}$) are affected.

-   Here, the idea is to unpack the interaction and add the interaction terms, then do centering on all terms.

    -   intercept == $\overline{y}$ is achieved

    -   the rest coefficients stay the same as in the original model

```{r}
#| warning: false
#| message: false

# -------- add interaction terms --------
data <- data %>%
  mutate(
    x2_cat2_by_x3 = x2_cat2 * x3,
    x2_cat3_by_x3 = x2_cat3 * x3
  )

# -------- centering each term --------
data <- data %>%
  mutate(
    x3_C = x3 - mean(data$x3),
    x2_cat2_by_x3_C = x2_cat2_by_x3 - mean(data$x2_cat2_by_x3),
    x2_cat3_by_x3_C = x2_cat3_by_x3 - mean(data$x2_cat3_by_x3)
  )

# --- linear regression model on original variables ---
fit <- lm(y ~ x2 * x3, data = data)
coef(fit)

# --- linear regression model on original variables, but unpacked ---
# to confirm it's the same as above
fit <- lm(y ~ x2_cat2 + x2_cat3 + x3 + x2_cat2_by_x3 + x2_cat3_by_x3, data = data)
coef(fit)

# --- linear regression model on centered variables ---"
paste0("Mean outcome in the dataset: ", mean(data$y))
fit <- lm(y ~ x2_cat2_C + x2_cat3_C + x3_C + x2_cat2_by_x3_C + x2_cat3_by_x3_C, data = data)
coef(fit)
```

# Interaction of two continuous variabl (no rcs): `x3`, `x5`

```{r}
#| warning: false
#| message: false

# -------- add interaction terms --------
data <- data %>%
  mutate(
    x3_by_x5 = x3 * x5
  )

# -------- centering each term --------
data <- data %>%
  mutate(
    x5_C = x5 - mean(data$x5),
    x3_by_x5_C = x3_by_x5 - mean(data$x3_by_x5)
  )

# --- linear regression model on original variables ---
fit <- lm(y ~ x3 * x5, data = data)
coef(fit)

# --- linear regression model on original variables, but unpacked ---
# to confirm it's the same as above
fit <- lm(y ~ x3 + x5 + x3_by_x5, data = data)
coef(fit)

# --- linear regression model on centered variables ---
# to confirm it's the same as above
paste0("Mean outcome in the dataset: ", mean(data$y))
fit <- lm(y ~ x3_C + x5_C + x3_by_x5_C, data = data)
coef(fit)
```

# Interaction of one categorical variable and one continuous variabl (with rcs): `x2`, `x4`

```{r}
# -------- add interaction terms --------
data <- data %>%
  mutate(
    x2_cat2_by_x4_rcs_1 = x2_cat2 * x4_rcs_1,
    x2_cat3_by_x4_rcs_1 = x2_cat3 * x4_rcs_1,
    x2_cat2_by_x4_rcs_2 = x2_cat2 * x4_rcs_2,
    x2_cat3_by_x4_rcs_2 = x2_cat3 * x4_rcs_2,
    x2_cat2_by_x4_rcs_3 = x2_cat2 * x4_rcs_3,
    x2_cat3_by_x4_rcs_3 = x2_cat3 * x4_rcs_3
  )

# -------- centering each term --------
data <- data %>%
  mutate(
    x4_rcs_1_C = x4_rcs_1 - mean(data$x4_rcs_1),
    x4_rcs_2_C = x4_rcs_2 - mean(data$x4_rcs_2),
    x4_rcs_3_C = x4_rcs_3 - mean(data$x4_rcs_3),
    x2_cat2_by_x4_rcs_1_C = x2_cat2_by_x4_rcs_1 - mean(data$x2_cat2_by_x4_rcs_1),
    x2_cat3_by_x4_rcs_1_C = x2_cat3_by_x4_rcs_1 - mean(data$x2_cat3_by_x4_rcs_1),
    x2_cat2_by_x4_rcs_2_C = x2_cat2_by_x4_rcs_2 - mean(data$x2_cat2_by_x4_rcs_2),
    x2_cat3_by_x4_rcs_2_C = x2_cat3_by_x4_rcs_2 - mean(data$x2_cat3_by_x4_rcs_2),
    x2_cat2_by_x4_rcs_3_C = x2_cat2_by_x4_rcs_3 - mean(data$x2_cat2_by_x4_rcs_3),
    x2_cat3_by_x4_rcs_3_C = x2_cat3_by_x4_rcs_3 - mean(data$x2_cat3_by_x4_rcs_3)
  )
  
# --- linear regression model on original variables ---
fit <- lm(y ~ x2 * rcs(x4, k_x4), data = data)
coef(fit)

# --- linear regression model on original variables, but unpacked ---
# to confirm it's the same as above
fit <- lm(y ~ x2_cat2 + x2_cat3 + x4_rcs_1 + x4_rcs_2 + x4_rcs_3 + 
              x2_cat2_by_x4_rcs_1 + 
              x2_cat3_by_x4_rcs_1 + 
              x2_cat2_by_x4_rcs_2 + 
              x2_cat3_by_x4_rcs_2 + 
              x2_cat2_by_x4_rcs_3 + 
              x2_cat3_by_x4_rcs_3, data = data)
coef(fit)

# --- linear regression model on centered variables ---
paste0("Mean outcome in the dataset: ", mean(data$y))
fit <- lm(y ~ x2_cat2_C + x2_cat3_C + x4_rcs_1_C + x4_rcs_2_C + x4_rcs_3_C + 
              x2_cat2_by_x4_rcs_1_C + 
              x2_cat3_by_x4_rcs_1_C + 
              x2_cat2_by_x4_rcs_2_C + 
              x2_cat3_by_x4_rcs_2_C + 
              x2_cat2_by_x4_rcs_3_C + 
              x2_cat3_by_x4_rcs_3_C, data = data)
coef(fit)
```

# Interaction of two continuous variables (one with rcs, one without): `x3`, `x4`

```{r}
# -------- add interaction terms --------
data <- data %>% 
  mutate(
    x3_by_x4_rcs_1 = x3 * x4_rcs_1,
    x3_by_x4_rcs_2 = x3 * x4_rcs_2,
    x3_by_x4_rcs_3 = x3 * x4_rcs_3
  )

# -------- centering each term --------
data <- data %>%
  mutate(
    x3_by_x4_rcs_1_C = x3_by_x4_rcs_1 - mean(data$x3_by_x4_rcs_1),
    x3_by_x4_rcs_2_C = x3_by_x4_rcs_2 - mean(data$x3_by_x4_rcs_2),
    x3_by_x4_rcs_3_C = x3_by_x4_rcs_3 - mean(data$x3_by_x4_rcs_3)
  )

# --- linear regression model on original variables ---
fit <- lm(y ~ x3 * rcs(x4, k_x4), data = data)
coef(fit)

# --- linear regression model on original variables, but unpacked ---
# to confirm it's the same as above
fit <- lm(y ~ x3 + x4_rcs_1 + x4_rcs_2 + x4_rcs_3 + x3_by_x4_rcs_1 + x3_by_x4_rcs_2 + x3_by_x4_rcs_3, data = data)
coef(fit)

# --- linear regression model on centered variables ---
paste0("Mean outcome in the dataset: ", mean(data$y))
fit <- lm(y ~ x3_C + x4_rcs_1_C + x4_rcs_2_C + x4_rcs_3_C + x3_by_x4_rcs_1_C + x3_by_x4_rcs_2_C + x3_by_x4_rcs_3_C, data = data)
coef(fit)
```

# Interaction of two continuous variables (with rcs): `x4`, `x6`

```{r}
# -------- add interaction terms --------
data <- data %>% 
  mutate(
    x4_rcs_1_by_x6_rcs_1 = x4_rcs_1 * x6_rcs_1,
    x4_rcs_2_by_x6_rcs_1 = x4_rcs_2 * x6_rcs_1,
    x4_rcs_3_by_x6_rcs_1 = x4_rcs_3 * x6_rcs_1,
    x4_rcs_1_by_x6_rcs_2 = x4_rcs_1 * x6_rcs_2,
    x4_rcs_2_by_x6_rcs_2 = x4_rcs_2 * x6_rcs_2,
    x4_rcs_3_by_x6_rcs_2 = x4_rcs_3 * x6_rcs_2
  )

# -------- centering each term --------
data <- data %>%
  mutate(
    x6_rcs_1_C = x6_rcs_1 - mean(data$x6_rcs_1),
    x6_rcs_2_C = x6_rcs_2 - mean(data$x6_rcs_2),
    x4_rcs_1_by_x6_rcs_1_C = x4_rcs_1_by_x6_rcs_1 - mean(data$x4_rcs_1_by_x6_rcs_1),
    x4_rcs_2_by_x6_rcs_1_C = x4_rcs_2_by_x6_rcs_1 - mean(data$x4_rcs_2_by_x6_rcs_1),
    x4_rcs_3_by_x6_rcs_1_C = x4_rcs_3_by_x6_rcs_1 - mean(data$x4_rcs_3_by_x6_rcs_1),
    x4_rcs_1_by_x6_rcs_2_C = x4_rcs_1_by_x6_rcs_2 - mean(data$x4_rcs_1_by_x6_rcs_2),
    x4_rcs_2_by_x6_rcs_2_C = x4_rcs_2_by_x6_rcs_2 - mean(data$x4_rcs_2_by_x6_rcs_2),
    x4_rcs_3_by_x6_rcs_2_C = x4_rcs_3_by_x6_rcs_2 - mean(data$x4_rcs_3_by_x6_rcs_2)
  )

# --- linear regression model on original variables ---
fit <- lm(y ~ rcs(x4, k_x4) * rcs(x6, k_x6), data = data)
coef(fit)

# --- linear regression model on original variables, but unpacked ---
# to confirm it's the same as above
fit <- lm(y ~ x4_rcs_1 + x4_rcs_2 + x4_rcs_3 + x6_rcs_1 + x6_rcs_2 +
  x4_rcs_1_by_x6_rcs_1 +
  x4_rcs_2_by_x6_rcs_1 +
  x4_rcs_3_by_x6_rcs_1 +
  x4_rcs_1_by_x6_rcs_2 +
  x4_rcs_2_by_x6_rcs_2 +
  x4_rcs_3_by_x6_rcs_2, data = data)
coef(fit)

# --- linear regression model on centered variables ---
paste0("Mean outcome in the dataset: ", mean(data$y))
fit <- lm(y ~ x4_rcs_1_C + x4_rcs_2_C + x4_rcs_3_C + x6_rcs_1_C + x6_rcs_2_C +
  x4_rcs_1_by_x6_rcs_1_C +
  x4_rcs_2_by_x6_rcs_1_C +
  x4_rcs_3_by_x6_rcs_1_C +
  x4_rcs_1_by_x6_rcs_2_C +
  x4_rcs_2_by_x6_rcs_2_C +
  x4_rcs_3_by_x6_rcs_2_C, data = data)
coef(fit)
```

# Put everything together

-   Interaction of two categorical variables: `x1`, `x2`

-   Interaction of one categorical variable and one continuous variabl (no rcs): `x2`, `x3`

-   Interaction of two continuous variables (no rcs): `x3`, `x5`

-   Interaction of one categorical variable and one continuous variabl (with rcs): `x2`, `x4`

-   Interaction of two continuous variables (one with rcs, one without): `x3`, `x4`

-   Interaction of two continuous variables (with rcs): `x4`, `x6`

```{r}
options(scipen = 999)
# original model
fit.o <- lm(y ~ x1 + x2 + x3 + rcs(x4,k_x4) + x5 + rcs(x6,k_x6) + 
              x1*x2 + x2*x3 + x3*x5 + x2*rcs(x4,k_x4) + x3*rcs(x4,k_x4) + rcs(x4,k_x4)*rcs(x6,k_x6), data = data)
coef(fit.o)

# original model, but unpacked
# confirm it's the same as above
fit.o.2 <- lm(y ~ x1_cat2 + x2_cat2 + x2_cat3 + x3 + x4_rcs_1 + x4_rcs_2 + x4_rcs_3 + x5 + x6_rcs_1 + x6_rcs_2 +
                  # interaction terms of x1 * x2
                  x1_cat2_by_x2_cat2 + x1_cat2_by_x2_cat3 +
                  # interaction terms of x2 * x3
                  x2_cat2_by_x3 + x2_cat3_by_x3 +
                  # interaction terms of x3 * x5
                  x3_by_x5 +
                  # interaction terms of x2 * rcs(x4, k_x4)
                  x2_cat2_by_x4_rcs_1 + 
                  x2_cat3_by_x4_rcs_1 + 
                  x2_cat2_by_x4_rcs_2 + 
                  x2_cat3_by_x4_rcs_2 + 
                  x2_cat2_by_x4_rcs_3 + 
                  x2_cat3_by_x4_rcs_3 +
                  # interaction terms of x3 * rcs(x4, k_x4)
                  x3_by_x4_rcs_1 + x3_by_x4_rcs_2 + x3_by_x4_rcs_3 +
                  # interaction terms of x4 * rcs(x6, k_x6)
                  x4_rcs_1_by_x6_rcs_1 +
                  x4_rcs_2_by_x6_rcs_1 +
                  x4_rcs_3_by_x6_rcs_1 +
                  x4_rcs_1_by_x6_rcs_2 +
                  x4_rcs_2_by_x6_rcs_2 +
                  x4_rcs_3_by_x6_rcs_2, data = data)
coef(fit.o.2)

# centered model
paste0("Mean outcome in the dataset: ", mean(data$y))
fit.c <- lm(y ~ x1_cat2_C + x2_cat2_C + x2_cat3_C + x3_C + x4_rcs_1_C + x4_rcs_2_C + x4_rcs_3_C + x5_C + x6_rcs_1_C + x6_rcs_2_C +
                # interaction terms of x1 * x2
                x1_cat2_by_x2_cat2_C + x1_cat2_by_x2_cat3_C +
                # interaction terms of x2 * x3
                x2_cat2_by_x3_C + x2_cat3_by_x3_C +
                # interaction terms of x3 * x5
                x3_by_x5_C +
                # interaction terms of x2 * rcs(x4, k_x4)
                x2_cat2_by_x4_rcs_1_C + 
                x2_cat3_by_x4_rcs_1_C + 
                x2_cat2_by_x4_rcs_2_C + 
                x2_cat3_by_x4_rcs_2_C + 
                x2_cat2_by_x4_rcs_3_C + 
                x2_cat3_by_x4_rcs_3_C +
                # interaction terms of x3 * rcs(x4, k_x4)
                x3_by_x4_rcs_1_C + x3_by_x4_rcs_2_C + x3_by_x4_rcs_3_C +
                # interaction terms of x4 * rcs(x6, k_x6)
                x4_rcs_1_by_x6_rcs_1_C +
                x4_rcs_2_by_x6_rcs_1_C +
                x4_rcs_3_by_x6_rcs_1_C +
                x4_rcs_1_by_x6_rcs_2_C +
                x4_rcs_2_by_x6_rcs_2_C +
                x4_rcs_3_by_x6_rcs_2_C, data = data)
coef(fit.c)
```

## test

Using the original or centered model, using the same predictors should result in the same predicted values.

```{r}
# a test subset, only selecting the original predictors
set.seed(100)
test <- sample_n(data %>% select(x1:x6, y), 100)

# -------- dummy variables --------
vars_cat <- c("x1", "x2")
test <- step_dummy(test, vars_cat)

# -------- rcs --------
# x4
k_x4 <- 4
rcs.fit <- rcs(data$x4, k_x4)
knots_x4 <- attributes(rcs.fit)$parms # knot locations
# x6
k_x6 <- 3
rcs.fit <- rcs(data$x6, k_x6)
knots_x6 <- attributes(rcs.fit)$parms # knot locations
# unpack rcs
vars_rcs <- c("x4", "x6")
knots_list <- list(knots_x4, knots_x6)
knots_list <- setNames(knots_list, vars_rcs)
test <- step_rcs(test, vars_rcs, knots_list)

# -------- interaction terms --------
interaction_list <- list(
  c("x1", "x2"),
  c("x2", "x3"),
  c("x3", "x5"),
  c("x2", "x4"),
  c("x3", "x4"),
  c("x4", "x6")
)
test <- step_interaction(test, interaction_list)

# -------- centering --------
vars_mean <- names(test)
# get mean values from the ORIGINAL dataset
means <- get_mean(data, vars_mean)
# centering vars in the test dataset
vars_center <- names(means)
test <- step_center(test, vars_center, means)

# -------- prediction --------
# predicted values using the original model
test$pred.o <- predict(fit.o, newdata = test)

# predicted values using the centered model
test$pred.c <- predict(fit.c, newdata = test)

# compare the predicted values
test$pred.o == test$pred.c
test$pred.o - test$pred.c
```

```{r}

```